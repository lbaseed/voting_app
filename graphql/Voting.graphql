type Voting {
    id: ID!
    uuid: ID!
    registered_voters: Int
    accredited_voters: Int
    votes_casted: Int
    valid_votes: Int
    invalid_votes: Int
    date: DateTime
    election: Election
    user: User
    pollingUnit: PollingUnit
    voteCounts: [VoteCount]
    created_at: DateTime
    updated_at: DateTime
}

input VoteCountInput {
    election_id: ID!
    polling_unit_id: ID!
    political_party_id: ID!
    votes: String!
}

extend type Mutation {
    createVoting(
    election_id: ID!
    polling_unit_id: ID!
    registered_voters: String
    accredited_voters: String
    votes_casted: String
    valid_votes: String
    invalid_votes: String
    date: DateTime
    vote_counts: [VoteCountInput]
    ): Voting

    updateVoting(
    id: ID!
    uuid: ID! @rules(apply: ["required", "exists:votings,uuid"])
    registered_voters: String
    accredited_voters: String
    votes_casted: String
    valid_votes: String
    invalid_votes: String
    date: DateTime
    image: String
    ): Voting @update

    deleteVoting(
    id: ID!
    ): Voting @delete
}

extend type Query {
    getVoting(
    uuid: ID! @eq @rules(apply: ["required", "exists:votings,uuid"])
    ): Voting @find

    allVotings(
    first: String = 25
    page: Int = 1
    ): [Voting] @paginate
}